pipeline {
    agent any

    environment {
        APP_NAME = 'cart-microservice'
        ACR_REGISTRY = 'youracr.azurecr.io'
        DOCKER_IMAGE = "${APP_NAME}"
        DOCKER_TAG = "${env.BUILD_NUMBER}" 
        NODE_VERSION = 'nodejs-18'

        AZURE_CREDENTIALS_ID = 'azure-service-principal'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        SNYK_CREDENTIALS_ID = 'snyk-api-token'
        OWASP_ZAP_API_KEY = credentials('owasp-zap-api-key')
        EMAIL_RECIPIENT = 'taha.lajili@gmail.com'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Set Up Node.js') {
            steps {
                nodejs(nodeJSInstallation: env.NODE_VERSION) {
                    sh 'node --version'
                    sh 'npm --version'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                nodejs(nodeJSInstallation: env.NODE_VERSION) {
                    sh 'npm install'
                }
            }
        }

        stage('Linting') {
            steps {
                nodejs(nodeJSInstallation: env.NODE_VERSION) {
                    sh 'npm run lint'
                    sh 'npx prettier --check src/**/*.ts'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                nodejs(nodeJSInstallation: env.NODE_VERSION) {
                    sh 'npm run test'
                }
            }
        }

        stage('Secret Scanning') {
            steps {
                script {
                    try {
                        echo "üïµÔ∏è‚Äç‚ôÇÔ∏è Scanning for secrets..."
                        sh 'npx @slangroom/git-secrets --scan'
                    } catch (Exception e) {
                        echo "üö® Secret detected! Failing build."
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Dependency Vulnerability Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: env.SNYK_CREDENTIALS_ID, variable: 'SNYK_TOKEN')]) {
                        sh '''
                            npm install -g snyk
                            snyk auth $SNYK_TOKEN
                            snyk test --severity-threshold=medium
                        '''
                    }
                }
            }
        }

        stage('Security Scan - OWASP ZAP') {
            steps {
                script {
                    echo "üõ°Ô∏è Running OWASP ZAP baseline scan..."
                    sh '''
                        docker pull owasp/zap2docker-stable
                        docker run -v $(pwd):/zap/wrk -t owasp/zap2docker-stable zap-baseline.py \
                          -t http://localhost:3000 \
                          -r zap-report.html
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üèóÔ∏è Building Docker image..."
                    sh "docker build -t ${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Push to ACR') {
            steps {
                script {
                    docker.withRegistry("https://${ACR_REGISTRY}",  env.ACR_CREDENTIALS_ID) {
                        def img = docker.image("${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                        img.push()
                    }
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                kubernetesDeploy(
                    configs: 'k8s/deployment.yaml,k8s/service.yaml',
                    kubeconfigId: env.KUBECONFIG_CREDENTIAL_ID,
                    enableConfigSubstitution: true
                )
            }
        }
    }

    post {
        success {
            emailext (
                subject: "‚úÖ SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: '''Check console output at ${BUILD_URL}''',
                to: "${EMAIL_RECIPIENT}"
            )
        }
        failure {
            emailext (
                subject: "‚ùå FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: '''Something went wrong. Please check: ${BUILD_URL}''',
                to: "${EMAIL_RECIPIENT}"
            )
        }
    }
}