pipeline {
    agent any

    options {
        disableConcurrentBuilds()
        timeout(time: 15, unit: 'MINUTES')
        cleanWs()
    }

    environment {
        APP_NAME = 'user'
        ACR_REGISTRY = 'myacr.azurecr.io'
        DOCKER_IMAGE = "${APP_NAME}-microservice"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        NODE_VERSION = '22'

        AZURE_CREDENTIALS_ID = 'azure-service-principal'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        SNYK_CREDENTIALS_ID = 'snyk-api-token'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Node.js Setup') {
            steps {
                nodejs(nodeJSInstallation: env.NODE_VERSION)
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "üîß Installing pnpm globally"
                    sh 'npm install -g pnpm'
                    
                    echo "üì¶ Installing dependencies"
                    sh 'pnpm install --frozen-lockfile'
                }
            }
        }

        stage('Build App') {
            steps {
                script {
                    echo "üèóÔ∏è Building ${APP_NAME} using Turbo"
                    sh "pnpm turbo run build --filter=${APP_NAME}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Running unit tests for ${APP_NAME}"
                    sh "pnpm turbo run test --filter=${APP_NAME}"

                    echo "‚úÖ Test coverage complete"
                }
            }
        }

        stage('Security Scan - Snyk') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "üîê Running Snyk Security Scan"
                    withCredentials([string(credentialsId: env.SNYK_CREDENTIALS_ID, variable: 'SNYK_TOKEN')]) {
                        sh '''
                            npm install -g snyk
                            snyk auth $SNYK_TOKEN
                            snyk test --severity-threshold=high
                        '''
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    echo "üêã Building Docker image for ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    dir("apps/${APP_NAME}") {
                        sh "docker build -t ${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }

                    echo "‚¨ÜÔ∏è Logging into Azure Container Registry"
                    sh """
                        az acr login --name myacr
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "‚ò∏Ô∏è Deploying to Kubernetes"

                    withKubeConfig(configName: env.KUBECONFIG_CREDENTIAL_ID) {
                        dir("infra/k8s/user") {
                            echo "Updating image in deployment.yaml"
                            sh "sed -i 's|image: .*|image: ${ACR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}|' deployment.yaml"

                            echo "Applying K8s manifests"
                            sh "kubectl apply -f configmap.yaml"
                            sh "kubectl apply -f secret.yaml"
                            sh "kubectl apply -f deployment.yaml"
                            sh "kubectl apply -f service.yaml"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment of ${APP_NAME} successful!"
        }
        failure {
            echo "‚ùå Failed to deploy ${APP_NAME}."
        }
    }
}